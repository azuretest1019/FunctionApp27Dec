resource "azurerm_storage_account" "storage_functapp" {
  name                      = "acthubtestdev03"
  resource_group_name       = var.resource_group_name
  location                  = var.location
  account_tier              = "Standard"
  account_replication_type  = "LRS"
  enable_https_traffic_only = true
  min_tls_version           = "TLS1_2"
  #tags                      = "test"

identity {
    type = var.assign_identity ? "SystemAssigned" : null
  }
network_rules {
    default_action             = var.sa_firewall_enabled ? "Deny" : "Allow"
    bypass                     = ["AzureServices"]
    virtual_network_subnet_ids = ["a001-functiontest","actfunctout"]
    ip_rules = []
      }
}
resource "azurerm_storage_container" "container" {
  count                 = length(var.containers_list)
  name                  = var.containers_list[count.index].name
  storage_account_name  = azurerm_storage_account.storage_functapp.name
  container_access_type = var.containers_list[count.index].access_type
 
}

resource "azurerm_app_service_plan" "app_sr_plan" {
  name                = "app-ser-plan"
  location            = var.location
  resource_group_name = var.resource_group_name

  sku {
    tier = "Standard"
    size = "S1"
  }
}
/*resource "azurerm_subnet" "endpoint" {
  name                 =   "endpoint"
  resource_group_name  =  var.resource_group_name
  virtual_network_name =  "a001-functiontest"
  address_prefixes     = ["10.3.1.225/27"]

  enforce_private_link_service_network_policies  = false
  enforce_private_link_endpoint_network_policies = true
}


# Create the Private endpoint for each Storage Account Service. This is how the Storage account gets the private IPs inside the VNet.
resource "azurerm_private_endpoint" "endpoint" {
  name                = "funcappprivateendpoint"
  location            =  var.location
  resource_group_name = var.resource_group_name
  subnet_id           = data.azurerm_subnet.example.id

  private_service_connection {
    name                           = "functionapp-privateserviceconnection"
    private_connection_resource_id = azurerm_function_app.function_app.id
    is_manual_connection           = false
  }

}*/
resource "azurerm_function_app" "function_app" {
  name                        = var.functionappname
  location                   = var.location
  resource_group_name        = var.resource_group_name
  app_service_plan_id        = azurerm_app_service_plan.app_sr_plan.id
  https_only                 = var.https_only
  storage_account_name       = azurerm_storage_account.storage_functapp.name
  storage_account_access_key = azurerm_storage_account.storage_functapp.primary_access_key
  tags                       = var.tags


  dynamic "connection_string" {
    for_each = var.connection_strings

    content {
      name  = connection_string.value.name
      type  = connection_string.value.type
      value = connection_string.value.value
    }
  }
  dynamic "identity" {
    for_each = var.identity[*]
    content {
      type         = lookup(identity.value, "type", null)
      identity_ids = lookup(identity.value, "identity_ids", null)
    }
  }
 
  dynamic "site_config" {
    for_each = var.site_config[*]
    iterator = each
    content {
      numberOfWorkers          = lookup(each.value, "numberofworkers", null)
      app_command_line         = lookup(each.value, "app_command_line", null)
      default_documents        = lookup(each.value, "default_documents", null)
      dotnet_framework_version = lookup(each.value, "dotnet_framework_version", null)
      local_mysql_enabled      = lookup(each.value, "local_mysql_enabled", null)
      linux_fx_version         = lookup(each.value, "linux_fx_version", null)
      windows_fx_version       = lookup(each.value, "windows_fx_version", null)
      managed_pipeline_mode    = lookup(each.value, "managed_pipeline_mode", null)

    }
  }
}

resource "azurerm_app_service_virtual_network_swift_connection" "appfunct_vnet" {
  app_service_id = azurerm_function_app.function_app.id
  subnet_id      = data.azurerm_subnet.example.id

}
